# coding: utf-8
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



f = codecs.open('unicode1.dat', encoding='utf-8')
f1 = codecs.open('unicode1.dat', encoding='utf-32')
b = f.encode('UTF-8')
print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "rb")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
  for val in t:
    data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")


f = open("synthetic.csv", "rb")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
  for val in t:
    data.append(float(val))
f.close()
counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
x = np.arange(counts.size) * dx + start
plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
f = data.groupby("Age")
mean_age = np.mean(f)
var_age = np.var(f)
std_age = np.sqrt(f)
plt.hist(f, bins = 100, density = True)
plt.ylabel('Age Histogram')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")


#Normal probability plot for age

counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
x = np.arange(counts.size) * dx + start

Age.sort()
X = np.linspace(1.0/len(age), 1, len(age))
Ppf_age = norm.ppf(x, mean_age, var_age)

plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")



# remove data not needed
data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
#survival rates
survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
print(survived_by_class)
survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
print(survived_by_sex)
survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
print(survived_by_age)

fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
ax.set_ylabel('Survival Rate')
ax.set_ylim(0.0,1.0)
ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
ax.set_ylim(0.0,1.0)
ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
ax.set_ylim(0.0,1.0)


#fare analysis
f = data.groupby("Fare")
plt.hist(f, bins = 100, density = True)
plt.ylabel('Fare Histogram')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")


#normal probability plot for fare
counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
x = np.arange(counts.size) * dx + start
plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for fare in Titanic')
plt.savefig("figure6.pdf")

fare_by_sex = data.groupby('Sex')['Fare'].mean()
ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "rb")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
  for val in t:
    data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")


# f = open("synthetic.csv", "rb")
# csvcontents = csv.reader(f)
# data = []
# for t in csvcontents:
#   for val in t:
#     data.append(float(val))
# f.close()
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.savefig("figure2.pdf")



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "rb")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
  for val in t:
    data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()


# f = open("synthetic.csv", "rb")
# csvcontents = csv.reader(f)
# data = []
# for t in csvcontents:
#   for val in t:
#     data.append(float(val))
# f.close()
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.savefig("figure2.pdf")



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "rb")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
    data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()


# f = open("synthetic.csv", "rb")
# csvcontents = csv.reader(f)
# data = []
# for t in csvcontents:
#   for val in t:
#     data.append(float(val))
# f.close()
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.savefig("figure2.pdf")



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "rb")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()


# f = open("synthetic.csv", "rb")
# csvcontents = csv.reader(f)
# data = []
# for t in csvcontents:
#   for val in t:
#     data.append(float(val))
# f.close()
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.savefig("figure2.pdf")



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()


# f = open("synthetic.csv", "rb")
# csvcontents = csv.reader(f)
# data = []
# for t in csvcontents:
#   for val in t:
#     data.append(float(val))
# f.close()
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.savefig("figure2.pdf")



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
x = np.arange(counts.size) * dx + start
plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
x = np.arange(counts.size) * dx + start
plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scify.stats.probplot(data,sparams=(),dist = 'norm', fit = true, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
x = np.arange(counts.size) * 1 + start
plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = true, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
x = np.arange(counts.size) * 1 + start
plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
x = np.arange(counts.size) * 1 + start
plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print "Mean" = np.mean(data)
print "Variance" = np.var(data)
print "Standard deviation" = np.sqrt(np.var(data))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean" :np.mean(data))
print "Variance" = np.var(data)
print "Standard deviation" = np.sqrt(np.var(data))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean" +np.mean(data))
print ("Variance" +np.var(data))
print ("Standard deviation" +np.sqrt(np.var(data)))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean" + str(np.mean(data)))
print ("Variance" +str(np.var(data)))
print ("Standard deviation" +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



# filename = "titanic.csv"
# data = pd.read_csv(filename)
# # Family column
# data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
print data

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
print (data)

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
print (data["Family"])

# # Age Analysis
# #classify as children and adults
# data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
print(data['Age'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
print(data['AgeRange'])
# # remove missing ages
# data_clean_age = data.dropna(subset=['Age'])
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
print(data_clean_age)
# f = data.groupby("Age")
# mean_age = np.mean(f)
# var_age = np.var(f)
# std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
print(f)
mean_age = np.mean(f)
var_age = np.var(f)
std_age = np.sqrt(f)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
print(f)
mean_age = data.groupby("Age").mean(f)
var_age = data.groupby("Age").var(f)
std_age = data.groupby("Age").sqrt(var_age)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
print(f)
mean_age = f.mean()
var_age = f.var()
std_age = f.sqrt(var_age)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
print(f)
mean_age = f.mean()
var_age = f.var()
std_age = Math.sqrt(var_age)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
#import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
print(f)
mean_age = f.mean()
var_age = f.var()
std_age = math.sqrt(var_age)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
print(f)
mean_age = f.mean()
var_age = f.var()
std_age = math.sqrt(var_age)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
#std_age = math.sqrt(var_age)
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Age Histogram')
# plt.title('Histogram for Age in Titanic')
# plt.savefig("figure3.pdf")


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))

plt.hist(f, bins = 100, density = True)
plt.ylabel('Age Histogram')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))

plt.hist(data['Age'], bins = 100, density = True)
plt.ylabel('Age Histogram')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))

plt.hist(data_clean_age, bins = 100, density = True)
plt.ylabel('Age Histogram')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Age Histogram')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# Age.sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)


# #fare analysis
# f = data.groupby("Fare")
# plt.hist(f, bins = 100, density = True)
# plt.ylabel('Fare Histogram')
# plt.title('Histogram for fare in Titanic')
# plt.savefig("figure4.pdf")


# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
f = data.groupby("Fare")
plt.hist(f, bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

Age.sort()
X = np.linspace(1.0/len(age), 1, len(age))
Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

Age.sort()
X = np.linspace(1.0/len(age), 1, len(age))
Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

data["Age"].sort()
X = np.linspace(1.0/len(age), 1, len(age))
Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()


# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# data["Age"].sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
print(mean_age)
print(var_age)
print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))

print(mean_fare)
print(var_fare)
print(std_fare)



# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# data["Age"].sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
print(mean_age)
print(var_age)
print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))

print("Mean fare: "+str(mean_fare))
print("fare Variance:"+str(var_fare))
print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# data["Age"].sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# data["Age"].sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
print ("Mean: " + str(np.mean(data_clean_age)))
print ("Variance: " +str(np.var(data_clean_age)))
print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# data["Age"].sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
print ("Mean: " + str(np.mean(data_clean_age)))
print ("Variance: " +str(np.var(data_clean_age)))
print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
print ("Mean: " + str(np.mean(data_clean_fare)))
print ("Variance: " +str(np.var(data_clean_fare)))
print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# data["Age"].sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start

# data["Age"].sort()
# X = np.linspace(1.0/len(age), 1, len(age))
# Ppf_age = norm.ppf(x, mean_age, var_age)

# plt.plot(Ppf_age, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for age in Titanic')
# plt.savefig("figure5.pdf")



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

counts, start, dx, _ = scipy.stats.probplot(data_clean_age,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
x = np.arange(counts.size) * dx + start

# data["Age"].sort()
X = np.linspace(1.0/len(data_clean_age), 1, len(data_clean_age))
Ppf_age = norm.ppf(x, mean_age, var_age)

plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

counts, start, dx, _ = scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
x = np.arange(counts.size) * dx + start

# data["Age"].sort()
X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
Ppf_age = norm.ppf(x, mean_age, var_age)

plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
Ppf_age = norm.ppf(x, mean_age, var_age)

plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
#x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
Ppf_age = norm.ppf(X, mean_age, var_age)

plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import stats
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
#x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
Ppf_age = scipy.norm.ppf(X, mean_age, var_age)

plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy.stats import norm
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)
#counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=plt)
#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
#x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
Ppf_age = scipy.stats.norm.ppf(X, mean_age, var_age)

plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy.stats import norm
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)

#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

#counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
#x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
# X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
# Ppf_age = scipy.stats.norm.ppf(X, mean_age, var_age)
counts, start = scipy.stats.probplot(data["Age"],sparams=(),dist = 'norm', fit = True, plot = plt)
# plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy.stats import norm
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)

#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

#counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
#x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
# X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
# Ppf_age = scipy.stats.norm.ppf(X, mean_age, var_age)
counts, start = scipy.stats.probplot(data["Age"],sparams=(),dist = 'norm', fit = True, plot = plt)
# plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()


# #Normal probability plot for fare
counts, start = scipy.stats.probplot(data["Fare"],sparams=(),dist = 'norm', fit = True, plot = plt)
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for Fare in Titanic')
plt.savefig("figure6.pdf")
plt.show()



# # remove data not needed
# data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
# #survival rates
# survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
# print(survived_by_class)
# survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
# print(survived_by_sex)
# survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
# print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy.stats import norm
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)

#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

#counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
#x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
# X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
# Ppf_age = scipy.stats.norm.ppf(X, mean_age, var_age)
counts, start = scipy.stats.probplot(data["Age"],sparams=(),dist = 'norm', fit = True, plot = plt)
# plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()


# #Normal probability plot for fare
counts, start = scipy.stats.probplot(data["Fare"],sparams=(),dist = 'norm', fit = True, plot = plt)
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for Fare in Titanic')
plt.savefig("figure6.pdf")
plt.show()


# Survival Rates Analysis



# remove data not needed
data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
#survival rates
survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
print(survived_by_class)
survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
print(survived_by_sex)
survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
print(survived_by_age)

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy.stats import norm
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)

#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

#counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
#x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
# X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
# Ppf_age = scipy.stats.norm.ppf(X, mean_age, var_age)
counts, start = scipy.stats.probplot(data["Age"],sparams=(),dist = 'norm', fit = True, plot = plt)
# plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()


# #Normal probability plot for fare
counts, start = scipy.stats.probplot(data["Fare"],sparams=(),dist = 'norm', fit = True, plot = plt)
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for Fare in Titanic')
plt.savefig("figure6.pdf")
plt.show()


# Survival Rates Analysis



# remove data not needed
data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
#survival rates
survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
print(survived_by_class)
survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
print(survived_by_sex)
survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
print(survived_by_age)


data.groupby(['Sex', 'Survived'])['Survived'].count()

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy.stats import norm
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)

#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

#counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
#x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
# X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
# Ppf_age = scipy.stats.norm.ppf(X, mean_age, var_age)
counts, start = scipy.stats.probplot(data["Age"],sparams=(),dist = 'norm', fit = True, plot = plt)
# plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()


# #Normal probability plot for fare
counts, start = scipy.stats.probplot(data["Fare"],sparams=(),dist = 'norm', fit = True, plot = plt)
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for Fare in Titanic')
plt.savefig("figure6.pdf")
plt.show()


# Survival Rates Analysis



# remove data not needed
data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
#survival rates
survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
print(survived_by_class)
survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
print(survived_by_sex)
survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
print(survived_by_age)

# Survival by Gender
data.groupby(['Sex', 'Survived'])['Survived'].count()

# Survival by Class and Gender
pd.crosstab([data.Sex, data.Survived], data.Pclass, margins= True).style.background_gradient(cmap='summer_r') 

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy.stats import norm
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)

#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

#counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
#x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
# X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
# Ppf_age = scipy.stats.norm.ppf(X, mean_age, var_age)
counts, start = scipy.stats.probplot(data["Age"],sparams=(),dist = 'norm', fit = True, plot = plt)
# plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()


# #Normal probability plot for fare
counts, start = scipy.stats.probplot(data["Fare"],sparams=(),dist = 'norm', fit = True, plot = plt)
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for Fare in Titanic')
plt.savefig("figure6.pdf")
plt.show()


# Survival Rates Analysis



# remove data not needed
data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
#survival rates
survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
print(survived_by_class)
survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
print(survived_by_sex)
survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
print(survived_by_age)

# Survival by Gender
data.groupby(['Sex', 'Survived'])['Survived'].count()

# Survival by Class and Gender
pd.crosstab([data.Sex, data.Survived], data.Pclass, margins= True).style.background_gradient(cmap='summer_r') 

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy.stats import norm
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)

#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

#counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
#x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
# X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
# Ppf_age = scipy.stats.norm.ppf(X, mean_age, var_age)
counts, start = scipy.stats.probplot(data["Age"],sparams=(),dist = 'norm', fit = True, plot = plt)
# plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()


# #Normal probability plot for fare
counts, start = scipy.stats.probplot(data["Fare"],sparams=(),dist = 'norm', fit = True, plot = plt)
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for Fare in Titanic')
plt.savefig("figure6.pdf")
plt.show()


# Survival Rates Analysis



# remove data not needed
data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
#survival rates
survived_by_class = data_clean_age.groupby('Pclass')['Survived'].mean()
print(survived_by_class)
survived_by_sex = data_clean_age.groupby('Sex')['Survived'].mean()
print(survived_by_sex)
survived_by_age = data_clean_age.groupby('AgeRange')['Survived'].mean()
print(survived_by_age)

# Survival by Gender
print(data.groupby(['Sex', 'Survived'])['Survived'].count())

# Survival by Class and Gender
pd.crosstab([data.Sex, data.Survived], data.Pclass, margins= True).style.background_gradient(cmap='summer_r') 

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy.stats import norm
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)

#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

#counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
#x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
# X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
# Ppf_age = scipy.stats.norm.ppf(X, mean_age, var_age)
counts, start = scipy.stats.probplot(data["Age"],sparams=(),dist = 'norm', fit = True, plot = plt)
# plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()


# #Normal probability plot for fare
counts, start = scipy.stats.probplot(data["Fare"],sparams=(),dist = 'norm', fit = True, plot = plt)
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for Fare in Titanic')
plt.savefig("figure6.pdf")
plt.show()


# Survival Rates Analysis



# remove data not needed
data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
#survival rates
survived_by_class = data.groupby('Pclass')['Survived'].mean()
print(survived_by_class)
survived_by_sex = data.groupby('Sex')['Survived'].mean()
print(survived_by_sex)
survived_by_age = data.groupby('AgeRange')['Survived'].mean()
print(survived_by_age)

# Survival by Gender
print(data.groupby(['Sex', 'Survived'])['Survived'].count())

# Survival by Class and Gender
pd.crosstab([data.Sex, data.Survived], data.Pclass, margins= True).style.background_gradient(cmap='summer_r') 

# fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

# ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
# ax.set_ylabel('Survival Rate')
# ax.set_ylim(0.0,1.0)
# ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
# ax.set_ylim(0.0,1.0)
# ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
# ax.set_ylim(0.0,1.0)





# #normal probability plot for fare
# counts, start, dx, _ = scipy.stats.probplot(data,sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
# x = np.arange(counts.size) * dx + start
# plt.plot(x, counts, 'ro')
# plt.xlabel('Value')
# plt.ylabel('Normalized count')
# plt.title('Probability plot for fare in Titanic')
# plt.savefig("figure6.pdf")

# fare_by_sex = data.groupby('Sex')['Fare'].mean()
# ax = fare_by_sex.plot.bar(title='Fare Average and Sex')
# ax.set_ylabel('Average Fare')
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy.stats import norm
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)

#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

#counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
#x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
# X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
# Ppf_age = scipy.stats.norm.ppf(X, mean_age, var_age)
counts, start = scipy.stats.probplot(data["Age"],sparams=(),dist = 'norm', fit = True, plot = plt)
# plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()


# #Normal probability plot for fare
counts, start = scipy.stats.probplot(data["Fare"],sparams=(),dist = 'norm', fit = True, plot = plt)
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for Fare in Titanic')
plt.savefig("figure6.pdf")
plt.show()


# Survival Rates Analysis



# remove data not needed
data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
#survival rates
survived_by_class = data.groupby('Pclass')['Survived'].mean()
print(survived_by_class)
survived_by_sex = data.groupby('Sex')['Survived'].mean()
print(survived_by_sex)
survived_by_age = data.groupby('AgeRange')['Survived'].mean()
print(survived_by_age)

# Survival by Gender
print(data.groupby(['Sex', 'Survived'])['Survived'].count())

# Survival by Class and Gender
pd.crosstab([data.Sex, data.Survived], data.Pclass, margins= True).style.background_gradient(cmap='summer_r') 

fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
ax.set_ylabel('Survival Rate')
ax.set_ylim(0.0,1.0)
ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
ax.set_ylim(0.0,1.0)
ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
ax.set_ylim(0.0,1.0)
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy.stats import norm
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)

#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

#counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
#x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
# X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
# Ppf_age = scipy.stats.norm.ppf(X, mean_age, var_age)
counts, start = scipy.stats.probplot(data["Age"],sparams=(),dist = 'norm', fit = True, plot = plt)
# plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()


# #Normal probability plot for fare
counts, start = scipy.stats.probplot(data["Fare"],sparams=(),dist = 'norm', fit = True, plot = plt)
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for Fare in Titanic')
plt.savefig("figure6.pdf")
plt.show()


# Survival Rates Analysis



# remove data not needed
data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
#survival rates
survived_by_class = data.groupby('Pclass')['Survived'].mean()
print(survived_by_class)
survived_by_sex = data.groupby('Sex')['Survived'].mean()
print(survived_by_sex)
survived_by_age = data.groupby('AgeRange')['Survived'].mean()
print(survived_by_age)
survived_by_class1 = data.groupby('Pclass'==1)['Survived'].mean()
print(survived_by_class1)

# Survival by Gender
print(data.groupby(['Sex', 'Survived'])['Survived'].count())

# Survival by Class and Gender
pd.crosstab([data.Sex, data.Survived], data.Pclass, margins= True).style.background_gradient(cmap='summer_r') 

fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
ax.set_ylabel('Survival Rate')
ax.set_ylim(0.0,1.0)
ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
ax.set_ylim(0.0,1.0)
ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
ax.set_ylim(0.0,1.0)
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy.stats import norm
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)

#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

#counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
#x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
# X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
# Ppf_age = scipy.stats.norm.ppf(X, mean_age, var_age)
counts, start = scipy.stats.probplot(data["Age"],sparams=(),dist = 'norm', fit = True, plot = plt)
# plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()


# #Normal probability plot for fare
counts, start = scipy.stats.probplot(data["Fare"],sparams=(),dist = 'norm', fit = True, plot = plt)
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for Fare in Titanic')
plt.savefig("figure6.pdf")
plt.show()


# Survival Rates Analysis



# remove data not needed
data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
#survival rates
survived_by_class = data.groupby('Pclass')['Survived'].mean()
print(survived_by_class)
survived_by_sex = data.groupby('Sex')['Survived'].mean()
print(survived_by_sex)
survived_by_age = data.groupby('AgeRange')['Survived'].mean()
print(survived_by_age)
survived_by_class1 = data.groupby('Pclass[1]')['Survived'].mean()
print(survived_by_class1)

# Survival by Gender
print(data.groupby(['Sex', 'Survived'])['Survived'].count())

# Survival by Class and Gender
pd.crosstab([data.Sex, data.Survived], data.Pclass, margins= True).style.background_gradient(cmap='summer_r') 

fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
ax.set_ylabel('Survival Rate')
ax.set_ylim(0.0,1.0)
ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
ax.set_ylim(0.0,1.0)
ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
ax.set_ylim(0.0,1.0)
#!/usr/bin/env python

import codecs
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy.stats import norm
from scipy.interpolate import UnivariateSpline
import pandas as pd
import matplotlib.backends.backend_pdf
import csv
import math



# f = codecs.open('unicode1.dat', encoding='utf-8')
# f1 = codecs.open('unicode1.dat', encoding='utf-32')
# b = f.encode('UTF-8')
# print " ".join(hex(ord(n)) for n in b)

#Synthetic

f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
  #data.append(float(t))
f.close()
plt.hist(data, bins = 100, density = True)
plt.ylabel("Normalized Counts")
plt.title('Histogram for synthetic numbers')
plt.savefig("figure1.pdf")
plt.show()
print ("Mean: " + str(np.mean(data)))
print ("Variance: " +str(np.var(data)))
print ("Standard deviation: " +str(np.sqrt(np.var(data))))


f = open("synthetic.csv", "r")
csvcontents = csv.reader(f)
data = []
for t in csvcontents:
    for val in t:
        data.append(float(val))
f.close()
counts, start = scipy.stats.probplot(data,sparams=(),dist = 'norm', fit = True, plot = plt)

#x = np.arange(counts.size) * 1 + start
#plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.savefig("figure2.pdf")
plt.show()



filename = "titanic.csv"
data = pd.read_csv(filename)
# Family column
data['Family'] = (data['SibSp'] > 0) | (data['Parch'] > 0)
#print (data["Family"])

# Age Analysis
#classify as children and adults
data['AgeRange'] = pd.cut(data['Age'], [0, 15, 80], labels=['child', 'adult'])
#print(data['AgeRange'])
# remove missing ages
data_clean_age = data.dropna(subset=['Age'])
#print(data_clean_age)
f = data.groupby("Age")
#print(f)
mean_age = f.mean()
var_age = f.var()
std_age = np.sqrt(np.var(data_clean_age))
# print ("Mean: " + str(np.mean(data_clean_age)))
# print ("Variance: " +str(np.var(data_clean_age)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_age))))
# print(mean_age)
# print(var_age)
# print(std_age)

plt.hist(data["Age"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for Age in Titanic')
plt.savefig("figure3.pdf")
plt.show()



#fare analysis
data_clean_fare = data.dropna(subset=['Fare'])
f = data.groupby("Fare")
plt.hist(data["Fare"], bins = 100, density = True)
plt.ylabel('Count')
plt.title('Histogram for fare in Titanic')
plt.savefig("figure4.pdf")
plt.show()
mean_fare = f.mean()
var_fare = f.var()
std_fare = np.sqrt(np.var(data_clean_fare))
# print ("Mean: " + str(np.mean(data_clean_fare)))
# print ("Variance: " +str(np.var(data_clean_fare)))
# print ("Standard deviation: " +str(np.sqrt(np.var(data_clean_fare))))

# print("Mean fare: "+str(mean_fare))
# print("fare Variance:"+str(var_fare))
# print("Fare Standard Dev:"+str(std_fare))



# #Normal probability plot for age

#counts, start= scipy.stats.probplot(data["Age"],sparams=(), dist='norm', fit=True, plot=None, rvalue=False)
#x = np.arange(counts.size) * 1 + start

# data["Age"].sort()
# X = np.linspace(1.0/len(data["Age"]), 1, len(data["Age"]))
# Ppf_age = scipy.stats.norm.ppf(X, mean_age, var_age)
counts, start = scipy.stats.probplot(data["Age"],sparams=(),dist = 'norm', fit = True, plot = plt)
# plt.plot(Ppf_age, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for age in Titanic')
plt.savefig("figure5.pdf")
plt.show()


# #Normal probability plot for fare
counts, start = scipy.stats.probplot(data["Fare"],sparams=(),dist = 'norm', fit = True, plot = plt)
plt.xlabel('Value')
plt.ylabel('Normalized count')
plt.title('Probability plot for Fare in Titanic')
plt.savefig("figure6.pdf")
plt.show()


# Survival Rates Analysis



# remove data not needed
data.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)
#survival rates
survived_by_class = data.groupby('Pclass')['Survived'].mean()
print(survived_by_class)
survived_by_sex = data.groupby('Sex')['Survived'].mean()
print(survived_by_sex)
survived_by_age = data.groupby('AgeRange')['Survived'].mean()
print(survived_by_age)

# Survival by Gender
print(data.groupby(['Sex', 'Survived'])['Survived'].count())

# Survival by Class and Gender
pd.crosstab([data.Sex, data.Survived], data.Pclass, margins= True).style.background_gradient(cmap='summer_r') 

fig, (axis1,axis2,axis3) = plt.subplots(1, 3, figsize=(16,6))

ax = survived_by_class.plot.bar(ax=axis1, color='#5975A4', title='Survival Rate by Class', sharey=True)
ax.set_ylabel('Survival Rate')
ax.set_ylim(0.0,1.0)
ax = survived_by_sex.plot.bar(ax=axis2, color='#5F9E6E', title='Survival Rate by Sex', sharey=True)
ax.set_ylim(0.0,1.0)
ax = survived_by_age.plot.bar(ax=axis3, color='#B55D60', title='Survival Rate by Age Range', sharey=True)
ax.set_ylim(0.0,1.0)
%save?
%save -r acquisition 1-9999999
